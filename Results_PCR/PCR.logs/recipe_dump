{
  "comment" => undef,
  "reference-database" => undef,
  "phone" => undef,
  "input-step" => undef,
  "begin-step" => 0,
  "id" => 0,
  "log_dir" => "Results/PCR.logs",
  "steps" => [
    {
      "steps" => [
        {
          "pattern-string" => "^ TCAGTACTGAGCTA[1,1,1]",
          "search-distance" => 20,
          "run" => bless( {
            "prl_precmd" => "",
            "postcmd" => "",
            "sum_routine" => "",
            "use_stats" => 1,
            "cmd" => "",
            "prl_postcmd" => "",
            "precmd" => "",
            "out_name" => "",
            "routine" => "Seq::Clean::clip_pat_beg_code",
            "prl_cmd" => "",
            "out_dirs" => 0,
            "use_recipe" => "",
            "in_zipped" => 1,
            "dir_routine" => "",
            "sum_total" => 0
          }, 'Recipe::Steps' ),
          "output-name" => undef,
          "summary" => undef,
          "name" => "sequence-clip-pattern-start.1",
          "title" => "Start adapter clip",
          "id" => 0,
          "comment" => undef,
          "include-match" => "no",
          "input-step" => undef,
          "pattern-orient" => "forward"
        },
        {
          "pattern-orient" => "forward",
          "input-step" => undef,
          "include-match" => "no",
          "comment" => undef,
          "id" => 1,
          "name" => "sequence-clip-pattern-start.2",
          "output-name" => undef,
          "summary" => undef,
          "title" => "5 primer start",
          "run" => bless( {
            "use_recipe" => "",
            "out_dirs" => 0,
            "dir_routine" => "",
            "in_zipped" => 1,
            "routine" => "Seq::Clean::clip_pat_beg_code",
            "prl_cmd" => "",
            "sum_total" => 0,
            "prl_precmd" => "",
            "use_stats" => 1,
            "postcmd" => "",
            "sum_routine" => "",
            "precmd" => "",
            "prl_postcmd" => "",
            "out_name" => "",
            "cmd" => ""
          }, 'Recipe::Steps' ),
          "search-distance" => 30,
          "pattern-string" => "GCCTAACACATGCAAGTC[1,1,1]"
        },
        {
          "id" => 2,
          "comment" => undef,
          "include-match" => "no",
          "pattern-orient" => "forward",
          "input-step" => undef,
          "search-distance" => 350,
          "pattern-string" => "CCAGCAGCCGCGGTAAT[1,1,1]",
          "run" => bless( {
            "postcmd" => "",
            "prl_precmd" => "",
            "use_stats" => 1,
            "sum_routine" => "",
            "cmd" => "",
            "out_name" => "",
            "precmd" => "",
            "prl_postcmd" => "",
            "prl_cmd" => "",
            "routine" => "Seq::Clean::clip_pat_end_code",
            "dir_routine" => "",
            "in_zipped" => 1,
            "out_dirs" => 0,
            "use_recipe" => "",
            "sum_total" => 0
          }, 'Recipe::Steps' ),
          "output-name" => undef,
          "summary" => undef,
          "name" => "sequence-clip-pattern-end.1",
          "title" => "3 primer reverse end"
        },
        {
          "pattern-string" => "ATTACCGCGGCTGCTGG[1,1,1]",
          "search-distance" => 30,
          "run" => bless( {
            "use_stats" => 1,
            "prl_precmd" => "",
            "postcmd" => "",
            "sum_routine" => "",
            "precmd" => "",
            "prl_postcmd" => "",
            "out_name" => "",
            "cmd" => "",
            "out_dirs" => 0,
            "use_recipe" => "",
            "dir_routine" => "",
            "in_zipped" => 1,
            "routine" => "Seq::Clean::clip_pat_beg_code",
            "prl_cmd" => "",
            "sum_total" => 0
          }, 'Recipe::Steps' ),
          "output-name" => undef,
          "name" => "sequence-clip-pattern-start.3",
          "summary" => undef,
          "title" => "3 primer start",
          "id" => 3,
          "comment" => undef,
          "include-match" => "no",
          "input-step" => undef,
          "pattern-orient" => "forward"
        },
        {
          "id" => 4,
          "comment" => undef,
          "include-match" => "no",
          "input-step" => undef,
          "pattern-orient" => "forward",
          "pattern-string" => "GACTTGCATGTGTTAGGC[1,1,1]",
          "search-distance" => 350,
          "run" => bless( {
            "sum_total" => 0,
            "dir_routine" => "",
            "in_zipped" => 1,
            "use_recipe" => "",
            "out_dirs" => 0,
            "prl_cmd" => "",
            "routine" => "Seq::Clean::clip_pat_end_code",
            "out_name" => "",
            "prl_postcmd" => "",
            "precmd" => "",
            "cmd" => "",
            "use_stats" => 1,
            "postcmd" => "",
            "sum_routine" => "",
            "prl_precmd" => ""
          }, 'Recipe::Steps' ),
          "output-name" => undef,
          "summary" => undef,
          "title" => "5 primer reverse end",
          "name" => "sequence-clip-pattern-end.2"
        },
        {
          "summary" => undef,
          "output-name" => undef,
          "title" => "Reverse adapter at end",
          "name" => "sequence-clip-pattern-end.3",
          "run" => bless( {
            "sum_total" => 0,
            "use_recipe" => "",
            "out_dirs" => 0,
            "in_zipped" => 1,
            "dir_routine" => "",
            "routine" => "Seq::Clean::clip_pat_end_code",
            "prl_cmd" => "",
            "prl_postcmd" => "",
            "precmd" => "",
            "out_name" => "",
            "cmd" => "",
            "postcmd" => "",
            "use_stats" => 1,
            "sum_routine" => "",
            "prl_precmd" => ""
          }, 'Recipe::Steps' ),
          "pattern-string" => "CTGAGACTGCCAAGGCACACAGGGGATAGG[2,1,1]",
          "search-distance" => 50,
          "input-step" => undef,
          "pattern-orient" => "forward",
          "include-match" => "no",
          "comment" => undef,
          "id" => 5
        },
        {
          "run" => bless( {
            "use_recipe" => "",
            "out_dirs" => 0,
            "dir_routine" => "",
            "in_zipped" => 1,
            "routine" => "Seq::Clean::clip_pat_end_code",
            "prl_cmd" => "",
            "sum_total" => 0,
            "use_stats" => 1,
            "postcmd" => "",
            "sum_routine" => "",
            "prl_precmd" => "",
            "precmd" => "",
            "prl_postcmd" => "",
            "out_name" => "",
            "cmd" => ""
          }, 'Recipe::Steps' ),
          "output-name" => undef,
          "summary" => undef,
          "title" => "Reverse adapter fragment",
          "name" => "sequence-clip-pattern-end.4",
          "search-distance" => 50,
          "pattern-string" => "AAGGCACACAGGGGAT[1,1,1]",
          "comment" => undef,
          "include-match" => "no",
          "input-step" => undef,
          "pattern-orient" => "forward",
          "id" => 6
        },
        {
          "summary" => undef,
          "output-name" => undef,
          "name" => "sequence-clip-pattern-end.5",
          "title" => "Reverse adapter fragment",
          "run" => bless( {
            "out_name" => "",
            "precmd" => "",
            "prl_postcmd" => "",
            "cmd" => "",
            "use_stats" => 1,
            "postcmd" => "",
            "sum_routine" => "",
            "prl_precmd" => "",
            "sum_total" => 0,
            "dir_routine" => "",
            "in_zipped" => 1,
            "use_recipe" => "",
            "out_dirs" => 0,
            "prl_cmd" => "",
            "routine" => "Seq::Clean::clip_pat_end_code"
          }, 'Recipe::Steps' ),
          "pattern-string" => "TGAGACTGCCAAAGGCACACA[1,1,1]",
          "search-distance" => 50,
          "pattern-orient" => "forward",
          "input-step" => undef,
          "comment" => undef,
          "include-match" => "no",
          "id" => 7
        },
        {
          "run" => bless( {
            "sum_total" => 0,
            "in_zipped" => 1,
            "dir_routine" => "",
            "use_recipe" => "",
            "out_dirs" => 0,
            "prl_cmd" => "",
            "routine" => "Seq::Clean::trim_seq_end_code",
            "out_name" => "",
            "precmd" => "",
            "prl_postcmd" => "",
            "cmd" => "",
            "postcmd" => "",
            "use_stats" => 1,
            "prl_precmd" => "",
            "sum_routine" => ""
          }, 'Recipe::Steps' ),
          "output-name" => undef,
          "summary" => "Trims sequence ends by overlap with a given sequence probe. The probe slides into the sequence and the best match position is used for clipping. Search distance, minimum length and strictness can be set.",
          "name" => "sequence-trim-end.1",
          "title" => "Reverse adapter end trim",
          "search-distance" => 50,
          "sequence" => "CTGAGACTGCCAAGGCACACAGGGGATAGG",
          "comment" => undef,
          "minimum-strict" => "80%",
          "input-step" => undef,
          "minimum-length" => 1,
          "id" => 8
        },
        {
          "minimum-quality" => 97,
          "run" => bless( {
            "postcmd" => "",
            "use_stats" => 1,
            "prl_precmd" => "",
            "sum_routine" => "",
            "cmd" => "",
            "prl_postcmd" => "",
            "precmd" => "",
            "out_name" => "",
            "routine" => "Seq::Clean::trim_qual_beg_code",
            "prl_cmd" => "",
            "use_recipe" => "",
            "out_dirs" => 0,
            "dir_routine" => "",
            "in_zipped" => 1,
            "sum_total" => 0
          }, 'Recipe::Steps' ),
          "output-name" => undef,
          "summary" => "Trims sequence starts by quality within a window. A window of a given length slides into the sequence and when the specified window quality and strictness is met, the sliding stops and the sequence is clipped and quality-trimmed at that position.",
          "name" => "sequence-trim-quality-start.1",
          "title" => "Start quality trim",
          "id" => 9,
          "window-length" => 15,
          "window-match" => 14,
          "comment" => undef,
          "input-step" => undef
        },
        {
          "run" => bless( {
            "prl_cmd" => "",
            "routine" => "Seq::Clean::trim_qual_end_code",
            "in_zipped" => 1,
            "dir_routine" => "",
            "use_recipe" => "",
            "out_dirs" => 0,
            "sum_total" => 0,
            "prl_precmd" => "",
            "postcmd" => "",
            "use_stats" => 1,
            "sum_routine" => "",
            "cmd" => "",
            "out_name" => "",
            "precmd" => "",
            "prl_postcmd" => ""
          }, 'Recipe::Steps' ),
          "output-name" => undef,
          "name" => "sequence-trim-quality-end.1",
          "title" => "End quality trim",
          "summary" => "Trims sequence ends by quality within a window. A window of a given length slides into the sequence and when the specified window quality and strictness is met, the sliding stops and the sequence is clipped and quality-trimmed at that position.",
          "minimum-quality" => 96,
          "comment" => undef,
          "input-step" => undef,
          "window-length" => 35,
          "id" => 10,
          "window-match" => 34
        },
        {
          "output-name" => undef,
          "pattern-string" => undef,
          "minimum-length" => 200,
          "input-step" => undef,
          "comment" => undef,
          "id" => 11,
          "maximum-gc-content" => undef,
          "forward" => "yes",
          "summary" => "Filters sequences by pattern, length and/or GC-content.",
          "title" => "Length filter",
          "name" => "sequence-filter.1",
          "run" => bless( {
            "in_zipped" => 1,
            "dir_routine" => "",
            "use_recipe" => "",
            "out_dirs" => 0,
            "prl_cmd" => "",
            "routine" => "Seq::Clean::filter_seq_code",
            "sum_total" => 0,
            "postcmd" => "",
            "sum_routine" => "",
            "prl_precmd" => "",
            "use_stats" => 1,
            "out_name" => "",
            "precmd" => "",
            "prl_postcmd" => "",
            "cmd" => ""
          }, 'Recipe::Steps' ),
          "maximum-length" => undef,
          "pattern-string-nomatch" => undef,
          "reverse" => "no",
          "minimum-gc-content" => "0%"
        },
        {
          "maximum-strict" => "100%",
          "comment" => undef,
          "input-step" => undef,
          "minimum-strict" => 90,
          "id" => 12,
          "run" => bless( {
            "sum_total" => 0,
            "prl_cmd" => "",
            "routine" => "Seq::Clean::filter_qual_code",
            "dir_routine" => "",
            "in_zipped" => 1,
            "out_dirs" => 0,
            "use_recipe" => "",
            "cmd" => "",
            "out_name" => "",
            "precmd" => "",
            "prl_postcmd" => "",
            "prl_precmd" => "",
            "use_stats" => 1,
            "postcmd" => "",
            "sum_routine" => ""
          }, 'Recipe::Steps' ),
          "output-name" => undef,
          "name" => "sequence-filter-quality.1",
          "summary" => "Filters sequences by minimum quality and stringency.",
          "title" => "Quality filter",
          "minimum-quality" => 95,
          "maximum-quality" => "100%"
        }
      ],
      "output-name" => undef,
      "comment" => undef,
      "phone" => "Someone's phone number",
      "input-step" => undef,
      "id" => 0,
      "run" => bless( {
        "use_recipe" => 1,
        "in_files" => [
          "Inputs/PCR.fq.gz"
        ],
        "dir_routine" => "",
        "out_suffix" => ".clean",
        "out_multi" => 1,
        "in_multi" => 1,
        "stat_files" => "Results/PCR.sequence-cleaning.1/*.stats",
        "in_dir" => undef,
        "prl_precmd" => "",
        "sum_routine" => "Seq::Clean::write_stats_sum",
        "precmd" => "",
        "out_name" => "",
        "prl_cmd" => "seq_clean __INPUT__ --oseqs __OUTPUT__ --stats __STATS__",
        "out_dirs" => 0,
        "in_zipped" => 1,
        "sum_total" => 0,
        "use_stats" => 1,
        "postcmd" => "",
        "out_dir" => "Results/PCR.sequence-cleaning.1",
        "cmd" => "",
        "out_files" => "Results/PCR.sequence-cleaning.1/*.clean",
        "prl_postcmd" => ""
      }, 'Recipe::Steps' ),
      "email" => "Someone's e-mail",
      "keep-outputs" => "no",
      "name" => "sequence-cleaning.1",
      "summary" => "Cleans, filters and trims sequences in various ways. Ends can be trimmed by complete or partial sequence match, pattern match and quality match. They can be filtered by overall quality and length, and sub-sequences extracted. See under \"steps\" in the table below for more detailed statistics for each sample.",
      "title" => "Sequence cleaning",
      "quality-type" => "Sanger",
      "author" => "Someone's name",
      "skype" => "Someone's skype id",
      "zip-outputs" => "no",
      "input-sequence-format" => "fastq"
    },
    {
      "id" => 1,
      "zip-outputs" => "no",
      "comment" => undef,
      "input-step" => 0,
      "minimum-identical" => 1,
      "run" => bless( {
        "in_zipped" => 0,
        "out_dirs" => 0,
        "prl_cmd" => "seq_derep __INPUT__ --outfmt fastq --outfile __OUTPUT__ --stats __STATS__",
        "sum_total" => 0,
        "out_dir" => "Results/PCR.sequence-dereplication.1",
        "use_stats" => 1,
        "postcmd" => "",
        "prl_postcmd" => "rm __OUTPUT__.derep && mv __OUTPUT__.derep.fastq __OUTPUT__",
        "out_files" => "Results/PCR.sequence-dereplication.1/*.uniq",
        "cmd" => "",
        "in_files" => "Results/PCR.sequence-cleaning.1/*.clean",
        "dir_routine" => "",
        "use_recipe" => 1,
        "stat_files" => "Results/PCR.sequence-dereplication.1/*.stats",
        "in_multi" => 1,
        "out_suffix" => ".uniq",
        "out_multi" => 1,
        "prl_precmd" => "",
        "sum_routine" => "Seq::Storage::write_derep_stats_sum",
        "in_dir" => "Results/PCR.sequence-cleaning.1",
        "out_name" => "",
        "precmd" => ""
      }, 'Recipe::Steps' ),
      "output-name" => undef,
      "summary" => "Uniqifies identical sequences and their qualities (if any). The best quality is kept for each position in the identical sequences. It is used as a fast and crude pre-clustering step that often greatly saves computer resources.",
      "name" => "sequence-dereplication.1",
      "title" => "Sequence de-replication",
      "keep-outputs" => "no"
    },
    {
      "run" => bless( {
        "use_stats" => 1,
        "postcmd" => "",
        "out_dir" => "Results/PCR.sequence-chimera-filter.1",
        "cmd" => "seq_chimera __INPUT__ --stats __STATS__ --outdir __OUTDIR__",
        "out_files" => "Results/PCR.sequence-chimera-filter.1/*.nochim",
        "prl_postcmd" => "",
        "prl_cmd" => "",
        "out_dirs" => 0,
        "in_zipped" => 1,
        "sum_total" => 0,
        "in_dir" => "Results/PCR.sequence-dereplication.1",
        "prl_precmd" => "",
        "sum_routine" => "Seq::Chimera::write_stats_sum",
        "precmd" => "",
        "out_name" => "",
        "use_recipe" => 1,
        "in_files" => "Results/PCR.sequence-dereplication.1/*.uniq",
        "dir_routine" => "",
        "out_suffix" => ".nochim",
        "out_multi" => 1,
        "in_multi" => 1,
        "stat_files" => "Results/PCR.sequence-chimera-filter.1/step.stats"
      }, 'Recipe::Steps' ),
      "dataset-name" => "RDP_SSU_44-534-C99",
      "title" => "Chimera filtering",
      "summary" => "This method measures chimera-potential of single-gene DNA sequences against a well-formed reference dataset without aligning. Outputs are score tables plus a chimera- and non-chimera sequence files. The method runs slightly faster, uses uses slightly less memory and has at least as good sensitivity as the closed-source uchime. Only two-fragment chimeras are detected at present, although triple-fragment usually also receive high scores. By default all available CPU cores are used.",
      "name" => "sequence-chimera-filter.1",
      "keep-outputs" => "no",
      "minimum-score" => 35,
      "step-length" => 4,
      "dataset-file" => undef,
      "word-length" => 8,
      "minimum-parent-length" => 80,
      "zip-outputs" => "no",
      "output-name" => undef,
      "read-buffer" => 2000,
      "comment" => undef,
      "input-step" => 1,
      "id" => 2,
      "debug-output" => "yes"
    },
    {
      "quality-type" => "Sanger",
      "dataset-file" => undef,
      "match-word-length" => 8,
      "run" => bless( {
        "use_recipe" => 1,
        "in_files" => "Results/PCR.sequence-chimera-filter.1/*.nochim",
        "dir_routine" => "Taxonomy::Profile::write_stats_sims_sum",
        "out_multi" => 1,
        "out_suffix" => ".sims",
        "in_multi" => 1,
        "stat_files" => "Results/PCR.sequence-similarities-simrank.1/step.stats",
        "in_dir" => "Results/PCR.sequence-chimera-filter.1",
        "sum_routine" => "",
        "prl_precmd" => "",
        "precmd" => "",
        "out_name" => "output",
        "prl_cmd" => "",
        "out_dirs" => 0,
        "in_zipped" => 1,
        "sum_total" => 0,
        "use_stats" => 1,
        "postcmd" => "",
        "out_dir" => "Results/PCR.sequence-similarities-simrank.1",
        "cmd" => "org_profile_sims __INPUT__ --outdir __OUTDIR__ --outpre __OUTPRE__ --stats __STATS__",
        "out_files" => "Results/PCR.sequence-similarities-simrank.1/*.sims",
        "prl_postcmd" => ""
      }, 'Recipe::Steps' ),
      "dataset-name" => "Silva_SSU_44-534-Paper",
      "summary" => "Creates similarities between query sequences and a reference dataset. To measure similarity between sequences A and B, each are converted to a list of unique \"words\" (or \"k-mers\") that are short sub-sequences of a fixed length in the 6-15 range. The similarity is then simply the number of common words divided by the smallest set of words in either. This ratio is then multiplied by 100 to become a percentage. The method is reasonably fast (much faster than blast), and can use all available CPU's and cores. It will return the best similarities even if they are poor and will skip poor quality bases in the query sequence (no other program can do this, yet it clearly improves the final analysis).",
      "name" => "sequence-similarities-simrank.1",
      "title" => "Silva simrank similarities",
      "keep-outputs" => "no",
      "run-parallel-cores" => undef,
      "zip-outputs" => "no",
      "match-agct-only" => "yes",
      "match-forward" => "yes",
      "match-step-length" => 1,
      "match-top-range" => "1%",
      "match-minimum" => "40%",
      "output-name" => "org_seqs_silva",
      "minimum-base-quality" => "93%",
      "id" => 3,
      "comment" => undef,
      "input-step" => 2,
      "match-reverse" => "yes"
    },
    {
      "score-unclassified-sister" => "no",
      "id-file" => undef,
      "match-minimum" => "40%",
      "minimum-majority-percent" => "90%",
      "match-weight" => 1,
      "output-name" => "org_profile_silva",
      "id" => 4,
      "map-method" => "branch_tree",
      "comment" => undef,
      "input-step" => 3,
      "minimum-oligo-count" => 180,
      "run" => bless( {
        "prl_cmd" => "",
        "in_zipped" => 1,
        "out_dirs" => 0,
        "sum_total" => 0,
        "use_stats" => 1,
        "postcmd" => "",
        "out_dir" => "Results/PCR.organism-taxonomy-profiler.1",
        "out_files" => "Results/PCR.organism-taxonomy-profiler.1/*.profile",
        "cmd" => "org_profile_mapper --sims '__INPUT__' --seqs '__INPUT__.seqs' --outdir __OUTDIR__ --outpre __OUTPRE__ --stats __STATS__",
        "prl_postcmd" => "",
        "dir_routine" => "Taxonomy::Profile::write_stats_profile_sum",
        "in_files" => "Results/PCR.sequence-similarities-simrank.1/*.sims",
        "use_recipe" => 1,
        "in_multi" => 1,
        "out_multi" => 1,
        "out_suffix" => ".profile",
        "stat_files" => "Results/PCR.organism-taxonomy-profiler.1/step.stats",
        "sum_routine" => "",
        "prl_precmd" => "",
        "in_dir" => "Results/PCR.sequence-similarities-simrank.1",
        "out_name" => "output",
        "precmd" => ""
      }, 'Recipe::Steps' ),
      "dataset-name" => "Silva_SSU_44-534-Paper",
      "title" => "Silva taxonomy mapping",
      "summary" => "Maps similarities onto a reference organism taxonomy and creates a binary profile. Similarities can be filtered by oligo-totals (=~ sequence length), by minimum value, by top range and a weighting option controls how to treat less good matches relative to the best ones.",
      "name" => "organism-taxonomy-profiler.1",
      "keep-outputs" => undef,
      "zip-outputs" => "no",
      "match-use-range" => "0%",
      "maximum-ambiguity-depth" => 1
    },
    {
      "input-step" => 4,
      "comment" => undef,
      "taxonomy-minimum-score" => 10,
      "id" => 5,
      "taxonomy-minimum-sum" => 1,
      "output-name" => "org_profile_silva",
      "id-file" => undef,
      "table-title-regex" => "(PCR)",
      "taxonomy-text-filter" => undef,
      "show-level" => undef,
      "normalized-column-total" => 100000,
      "zip-outputs" => "no",
      "keep-outputs" => undef,
      "summary" => "Filters and formats a multi-sample organism taxonomy profile into a set of tables. Outputs are HTML and text tables of scores unmodified, normalized scores, scores summed across all parents, and summed normalized tables. The input profile can be filtered by OTU name expressions, taxonomy level, row score sums and minimum score values.",
      "title" => "Silva profile tables",
      "name" => "organism-profile-format.1",
      "run" => bless( {
        "in_dir" => "Results/PCR.organism-taxonomy-profiler.1",
        "prl_precmd" => "",
        "sum_routine" => "",
        "precmd" => "",
        "out_name" => "output",
        "use_recipe" => 1,
        "in_files" => "Results/PCR.organism-taxonomy-profiler.1/*.profile",
        "dir_routine" => "Taxonomy::Profile::write_stats_format_dirs",
        "out_suffix" => ".subtax",
        "out_multi" => 1,
        "in_multi" => 0,
        "stat_files" => "Results/PCR.organism-profile-format.1/step.stats",
        "use_stats" => 1,
        "postcmd" => "",
        "out_dir" => "Results/PCR.organism-profile-format.1",
        "out_files" => "Results/PCR.organism-profile-format.1/*.subtax",
        "cmd" => "org_profile_format __INPUT__ --oname __OUTPUT__ --stats __STATS__",
        "prl_postcmd" => "",
        "prl_cmd" => "",
        "out_dirs" => 0,
        "in_zipped" => 1,
        "sum_total" => 0
      }, 'Recipe::Steps' ),
      "decimal-places" => 0
    },
    {
      "comment" => undef,
      "match-reverse" => "yes",
      "input-step" => 2,
      "id" => 6,
      "minimum-base-quality" => "93%",
      "match-top-range" => "1%",
      "match-minimum" => "40%",
      "output-name" => "org_seqs_rdp",
      "match-agct-only" => "yes",
      "match-step-length" => 1,
      "match-forward" => "yes",
      "zip-outputs" => "no",
      "match-word-length" => 8,
      "run" => bless( {
        "prl_postcmd" => "",
        "cmd" => "org_profile_sims __INPUT__ --outdir __OUTDIR__ --outpre __OUTPRE__ --stats __STATS__",
        "out_files" => "Results/PCR.sequence-similarities-simrank.2/*.sims",
        "out_dir" => "Results/PCR.sequence-similarities-simrank.2",
        "use_stats" => 1,
        "postcmd" => "",
        "sum_total" => 0,
        "out_dirs" => 0,
        "in_zipped" => 1,
        "prl_cmd" => "",
        "precmd" => "",
        "out_name" => "output",
        "in_dir" => "Results/PCR.sequence-chimera-filter.1",
        "sum_routine" => "",
        "prl_precmd" => "",
        "stat_files" => "Results/PCR.sequence-similarities-simrank.2/step.stats",
        "out_multi" => 1,
        "out_suffix" => ".sims",
        "in_multi" => 1,
        "use_recipe" => 1,
        "in_files" => "Results/PCR.sequence-chimera-filter.1/*.nochim",
        "dir_routine" => "Taxonomy::Profile::write_stats_sims_sum"
      }, 'Recipe::Steps' ),
      "dataset-name" => "RDP_SSU_44-534-Paper",
      "run-parallel-cores" => undef,
      "keep-outputs" => "no",
      "title" => "RDP simrank similarities",
      "summary" => "Creates similarities between query sequences and a reference dataset. To measure similarity between sequences A and B, each are converted to a list of unique \"words\" (or \"k-mers\") that are short sub-sequences of a fixed length in the 6-15 range. The similarity is then simply the number of common words divided by the smallest set of words in either. This ratio is then multiplied by 100 to become a percentage. The method is reasonably fast (much faster than blast), and can use all available CPU's and cores. It will return the best similarities even if they are poor and will skip poor quality bases in the query sequence (no other program can do this, yet it clearly improves the final analysis).",
      "name" => "sequence-similarities-simrank.2",
      "quality-type" => "Sanger",
      "dataset-file" => undef
    },
    {
      "match-use-range" => "0%",
      "zip-outputs" => "no",
      "maximum-ambiguity-depth" => 1,
      "minimum-oligo-count" => 180,
      "summary" => "Maps similarities onto a reference organism taxonomy and creates a binary profile. Similarities can be filtered by oligo-totals (=~ sequence length), by minimum value, by top range and a weighting option controls how to treat less good matches relative to the best ones.",
      "title" => "RDP taxonomy mapping",
      "name" => "organism-taxonomy-profiler.2",
      "keep-outputs" => undef,
      "run" => bless( {
        "out_name" => "output",
        "precmd" => "",
        "sum_routine" => "",
        "prl_precmd" => "",
        "in_dir" => "Results/PCR.sequence-similarities-simrank.2",
        "stat_files" => "Results/PCR.organism-taxonomy-profiler.2/step.stats",
        "in_multi" => 1,
        "out_multi" => 1,
        "out_suffix" => ".profile",
        "in_files" => "Results/PCR.sequence-similarities-simrank.2/*.sims",
        "dir_routine" => "Taxonomy::Profile::write_stats_profile_sum",
        "use_recipe" => 1,
        "prl_postcmd" => "",
        "out_files" => "Results/PCR.organism-taxonomy-profiler.2/*.profile",
        "cmd" => "org_profile_mapper --sims '__INPUT__' --seqs '__INPUT__.seqs' --outdir __OUTDIR__ --outpre __OUTPRE__ --stats __STATS__",
        "out_dir" => "Results/PCR.organism-taxonomy-profiler.2",
        "use_stats" => 1,
        "postcmd" => "",
        "sum_total" => 0,
        "in_zipped" => 1,
        "out_dirs" => 0,
        "prl_cmd" => ""
      }, 'Recipe::Steps' ),
      "dataset-name" => "RDP_SSU_44-534-Paper",
      "map-method" => "branch_tree",
      "id" => 7,
      "input-step" => 6,
      "comment" => undef,
      "id-file" => undef,
      "score-unclassified-sister" => "no",
      "match-weight" => 1,
      "output-name" => "org_profile_rdp",
      "match-minimum" => "40%",
      "minimum-majority-percent" => "90%"
    },
    {
      "decimal-places" => 0,
      "run" => bless( {
        "sum_total" => 0,
        "prl_cmd" => "",
        "in_zipped" => 1,
        "out_dirs" => 0,
        "cmd" => "org_profile_format __INPUT__ --oname __OUTPUT__ --stats __STATS__",
        "out_files" => "Results/PCR.organism-profile-format.2/*.subtax",
        "prl_postcmd" => "",
        "use_stats" => 1,
        "postcmd" => "",
        "out_dir" => "Results/PCR.organism-profile-format.2",
        "in_multi" => 0,
        "out_suffix" => ".subtax",
        "out_multi" => 1,
        "stat_files" => "Results/PCR.organism-profile-format.2/step.stats",
        "dir_routine" => "Taxonomy::Profile::write_stats_format_dirs",
        "in_files" => "Results/PCR.organism-taxonomy-profiler.2/*.profile",
        "use_recipe" => 1,
        "out_name" => "output",
        "precmd" => "",
        "prl_precmd" => "",
        "sum_routine" => "",
        "in_dir" => "Results/PCR.organism-taxonomy-profiler.2"
      }, 'Recipe::Steps' ),
      "keep-outputs" => undef,
      "title" => "RDP profile tables",
      "summary" => "Filters and formats a multi-sample organism taxonomy profile into a set of tables. Outputs are HTML and text tables of scores unmodified, normalized scores, scores summed across all parents, and summed normalized tables. The input profile can be filtered by OTU name expressions, taxonomy level, row score sums and minimum score values.",
      "name" => "organism-profile-format.2",
      "zip-outputs" => "no",
      "taxonomy-text-filter" => undef,
      "table-title-regex" => "(PCR)",
      "show-level" => undef,
      "normalized-column-total" => 100000,
      "id-file" => undef,
      "taxonomy-minimum-sum" => 1,
      "output-name" => "org_profile_rdp",
      "id" => 8,
      "taxonomy-minimum-score" => 10,
      "comment" => undef,
      "input-step" => 7
    }
  ],
  "reference-molecule" => undef,
  "output-name" => undef,
  "web" => undef,
  "site" => "BION-meta",
  "reference-sequence" => undef,
  "skype" => undef,
  "zip-outputs" => "no",
  "run" => bless( {
    "dir_routine" => "",
    "in_zipped" => 1,
    "out_dirs" => 0,
    "use_recipe" => "",
    "prl_cmd" => "",
    "sum_total" => 0,
    "prl_precmd" => "",
    "postcmd" => "",
    "sum_routine" => "",
    "use_stats" => 1,
    "out_name" => "",
    "prl_postcmd" => "",
    "precmd" => "",
    "cmd" => ""
  }, 'Recipe::Steps' ),
  "end-step" => 8,
  "email" => "niels\@genomics.dk",
  "name" => "recipe.1",
  "summary" => undef,
  "title" => "PCR vs Silva and RDP",
  "file" => "/disk1/nel/James/PCR/PCR.recipe",
  "author" => "Niels Larsen, James McDonald"
}
