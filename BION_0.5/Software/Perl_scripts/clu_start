#!/usr/bin/env perl

use strict;
use warnings FATAL => qw ( all );

use Getopt::Long;

use Common::Config;
use Common::Messages;
use Common::Cluster;

my ( $prog_name, $usage, $signature, @msgs, $acctfile, $acctpath, 
     $routine, $program, $args );

$prog_name = ( split "/", $0 )[-1];
$signature = &Common::Config::get_signature();

$acctpath = &Common::Cluster::accts_file;
$acctfile = File::Basename::basename( $acctpath );

$usage = qq (
Program $prog_name, January 2009.

Runs a program on the slaves with the given parameters, remote inputs and 
datasets. The input and dataset paths can be single files, directories or file 
path expressions in shell syntax. Inputs and datasets must be placed on the 
slave machines with the clu_put command, which can split the data according to 
content or file size. Command line arguments:

    --program name     Program name
 [ --params string ]   Program parameters - OPTIONAL (none)
     --inputs path     Slave input path expression
 [ --datasets path ]   Slave data path expression - OPTIONAL (some apps)
    [ --background ]   Run in the background - OPTIONAL (off)
        [ --delete ]   Removes job directories - OPTIONAL (off)

   [ --slaves name ]   Slave configuration file - OPTIONAL ($acctfile)
   [ --filter expr ]   Slave name filter expression - OPTIONAL (none)
  [ --timeout secs ]   Connection timeouts - OPTIONAL (5 seconds)
        [ --silent ]   Suppress progress messages - OPTIONAL (on)

Usage examples:

1\) $prog_name --program patscan_nuc --inputs Datasets/SRP/Motifs/*  \ 
             --datasets Datasets/SRP/*.fasta 

2\) $prog_name --program pfold --inputs Datasets/Virus/*.ali 

3\) $prog_name --program nsimscan --inputs Datasets/SSU/New/*  \ 
             --datasets Datasets/SSU/*.fasta --background

Example 1 runs a directory of motifs against a directory of sequence files. 
Example 2 runs an RNA structure finding program on a number of alignments.
Example 3 runs a blast-like similarity comparison between a set of new sequences 
and a reference set of SSU RNA fasta files. It runs in the background on each 
slave machine. 

The command clu_doc --programs lists available commands and applications that
can be run.

$signature
);

&Common::Messages::print_usage_and_exit( $usage );

# >>>>>>>>>>>>>>>>>>>>>>>> GET AND VALIDATE INPUT <<<<<<<<<<<<<<<<<<<<<<<<

$args = &Common::Config::get_commandline(
    {
        "program=s" => undef,
        "params=s" => undef,
        "inputs=s" => undef,
        "datasets=s" => undef,
        "background!" => 0,
        "slaves=s" => $acctpath,
        "filter=s" => undef,
        "timeout=s" => undef,
        "silent!" => 0,
    });

if ( @ARGV )
{
    @msgs = (
        ["ERROR", qq (More files specified than included.) ],
        "",
        ["Advice", qq (This could happen due to shell expansion of a path) ],
        ["Advice", qq (containing wildcards - likely the input path. The fix) ],
        ["Advice", qq (is to put the path within quotes.) ],
        );

    &echo_messages( \@msgs );
    exit;
}

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>> RUN PROGRAMS <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

local $Common::Messages::silent = $args->silent;

&Common::Cluster::run_program(
    undef,
    {
        "program" => $args->program,
        "params" => $args->params,
        "inputs" => $args->inputs,
        "datasets" => $args->datasets,
        "background" => $args->background,
        "acctfile" => $args->slaves,
        "acctexpr" => $args->filter,
        "timeout" => $args->timeout,
        "silent" => $args->silent,
        "checkargs" => 1,
        "format" => "ascii",
    }, \@msgs );

if ( @msgs ) {
    &echo_messages( \@msgs );
    exit;
}    

&echo_bold( qq (done\n\n) );

__END__
