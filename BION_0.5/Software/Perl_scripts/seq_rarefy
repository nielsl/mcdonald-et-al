#!/usr/bin/env perl

# -*- perl -*-

use strict;
use warnings FATAL => qw ( all );

use Common::Config;
use Common::Messages;

use Seq::Help;
use Seq::Convert;

my ( $prog_name, $signature, $usage, $args, $seqs, $out_formats );

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>> USAGE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

$prog_name = ( split "/", $0 )[-1];
$signature = &Common::Config::get_signature();

$usage = qq (
Program $prog_name, March 2013.

Reads a set of files and writes a new set that has the same number 
of sequences in all files. That number is that of the smallest of 
any input file above a given minimum, which defaults to one. Files
with less than the given minimum are not written. The output files
take the same format as the input files, but get a given name 
suffix and can be directed to a given output directory. Command 
line arguments are, defaults in parantheses,

   --recipe   Recipe file (none)

   --minseq   Minimum number of sequences per file
   --maxseq   Maximum number of sequences per file
   --suffix   Output file name suffix (.rare)
   --outdir   Output directory (current directory)
   --outpre   Output file name prefix (taken from file names)
    --stats   Statistics output file ($prog_name.stats)

  --readbuf   Sequences read-ahead buffer (10,000)
  --clobber   Overwrites output files (off)
   --silent   Prints no progress messages (off)

     --help   Prints various $prog_name help (off)
    
Examples,

1\) $prog_name seqs.fq --patfile primers.txt --barfile bars.tab 
2\) zcat *.fq.gz | $prog_name --barf bars.tab --patf primers.txt

Author: $signature
);

&Common::Messages::print_usage_and_exit( $usage );

# >>>>>>>>>>>>>>>>>>>>>>>>>>> GET OPTIONS <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

$args = &Common::Config::get_commandline(
    {
        "recipe=s" => undef,
        "seqfiles=s" => undef,
        "minseq=i" => undef,
        "maxseq=i" => undef,
        "suffix=s" => undef,
        "outdir=s" => undef,
        "stats=s" => undef,
        "readbuf=i" => undef,
        "clobber!" => 0,
	"silent!" => 0,
        "help:s" => undef,
    });

$args->seqfiles( \@ARGV );

# >>>>>>>>>>>>>>>>>>>>>>>>>> GET SEQUENCES <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

if ( defined $args->help )
{
    print &Seq::Help::dispatch( $prog_name, $args->help );
    exit;
}
else
{
    $args->delete_field( "help" );
    &Seq::Convert::rarefy( $args );
}

__END__
